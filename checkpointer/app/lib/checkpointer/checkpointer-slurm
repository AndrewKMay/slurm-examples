#! /bin/bash

source ${CHECKPOINTER_LIBDIR}/checkpointer-lib

wait_dump_and_submit() {
  # wait for end of wall time, dump pid CHECKPOINTER_PROCESS and 
  # submit a new batch job to bring the process back on a different node
  local STOPME=0
  #/WALLTIME=$(squeue --noheader -o %l -j $SLURM_JOB_ID)
  cd "${SLURM_SUBMIT_DIR}"
  #/mkdir -p "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/local-scratch/"
  mkdir -p "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT}/local-scratch/"
  while [[ ${STOPME} -eq 0 ]]; do
    TIMELEFT=$(squeue --noheader -o %L -j $SLURM_JOB_ID)
    if [[ "${TIMELEFT}" == "INVALID" ]]; then
      STOPME=1
    fi
    RUNTIME=$(squeue --noheader -o %M -j $SLURM_JOB_ID)
    RUNTIME_SECS=$(slurmtime_to_sec ${RUNTIME})
    ps -p ${CHECKPOINTER_PROCESS} > /dev/null || STOPME=1
    echoErr "Time left: ${TIMELEFT}"
    echoErr "Runtime: ${RUNTIME}"
    echoErr "Runtime secs: ${RUNTIME_SECS}"
    echoErr "Checkpoint secs: ${SLURM_CHECKPOINT_SECS}"
    echoErr "Stopme: ${STOPME}"
    #/if [[ ${#TIMELEFT} -eq 4 && "${TIMELEFT:1:1}" == ":" && ${STOPME} -eq 0 ]]; then
    if [[ ${RUNTIME_SECS} -ge ${SLURM_CHECKPOINT_SECS} && ${STOPME} -eq 0 ]]; then
      # less than 9:59 min left on job ..... so checkpoint now!!
      #/if [[ -z ${PREVJOBID} ]]; then  
      if [[ -z ${SLURM_RESTART_COUNT} ]]; then
	# this is the very first checkpoint and this workaround is needed because 
        # the checkpoint tool takes down this control script with the compute process 
        # (not sure why) when run for the first time for any given job so we need to 
	# copy out data from local scratch before checkpointing and to avoid data 
        # inconsistencies we need to freeze the process using SIGSTOP
	echoErr "Sending SIGSTOP to first process .."
        kill -SIGSTOP ${CHECKPOINTER_PROCESS}
        #/echoErr "Uploading Scratch to ${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/local-scratch"
        #/copyTool "${CHECKPOINTER_SCRATCH_ROOT}" "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/local-scratch"
        echoErr "Uploading Scratch to ${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT}/local-scratch"
        copyTool "${CHECKPOINTER_SCRATCH_ROOT}" "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT}/local-scratch"
      fi
      #/echoErr "Submitting new Slurm job to restore checkpoint ..."
      ##echoErr "Requeueing ..."
      #/slurm_submit ${SLURM_JOB_ID}
      ##scontrol requeue ${SLURM_JOB_ID}
      #/cd ${CHECKPOINTER_DIR}/${SLURM_JOB_ID}
      cd ${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT}
      echoErr "Dumping checkpoint for pid ${CHECKPOINTER_PROCESS} to "
      #/echoErr "${CHECKPOINTER_DIR}/${SLURM_JOB_ID} ..."
      echoErr "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT}"
      ${CHECKPOINTER_LIBDIR}/checkpointer-suid dump ${CHECKPOINTER_PROCESS}
      CREXIT=$?
      echoErr "Dump done, Exit code: ${CREXIT}"
      #/if [[ -n ${PREVJOBID} ]]; then
        #/${SLURM_RESTART_COUNT}
        #/echoErr "Uploading Scratch to ${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/local-scratch"
        #/copyTool "${CHECKPOINTER_SCRATCH_ROOT}" "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/local-scratch"
      #/fi
      if [[ -n ${SLURM_RESTART_COUNT} ]]; then
        echoErr "Uploading Scratch to \
	        ${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT}/local-scratch"
        copyTool "${CHECKPOINTER_SCRATCH_ROOT}" \
	        "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT}/local-scratch"
      fi
      echoErr "Requeueing ... ${SLURM_JOB_ID}"
      scontrol requeue ${SLURM_JOB_ID}

      #echoErr "listing ... ${CHECKPOINTER_SCRATCH_ROOT}"
      #ls -l "${CHECKPOINTER_SCRATCH_ROOT}"
      ############### Temp clean
      rm -f "${CHECKPOINTER_SCRATCH_ROOT}/*"
      ###############
      cd "${SLURM_SUBMIT_DIR}"
      exit ${CREXIT}
    else
      echoErr "nnnnnnnooooooooooo"
    fi
    if [[ ${STOPME} -eq 1 ]]; then
      if [[ -d "${RESULT_FOLDER}" ]]; then
        copyTool "${CHECKPOINTER_SCRATCH_ROOT}" "${RESULT_FOLDER}"
        echoErr "Final result copied to ${RESULT_FOLDER}"
      else
        #/copyTool "${CHECKPOINTER_SCRATCH_ROOT}" "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/local-scratch"
        #/echoErr "Final result copied to ${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/local-scratch"
        copyTool "${CHECKPOINTER_SCRATCH_ROOT}" \
	         "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT}/local-scratch"
        echoErr "Final result copied to \
	        ${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT}/local-scratch"
      fi
    fi
    sleep 5
  done
}

slurm_submit() {
  local MYJOBID=$1
  sbatch -J "${SLURM_JOB_NAME}+CRrestore+${FIRSTJOBID}+${MYJOBID}+${CHECKPOINTER_PROCESS}" \
         -c ${SLURM_CPUS_ON_NODE} -A "${SLURM_JOB_ACCOUNT}" -M "${SLURM_CLUSTER_NAME}" \
         -p ${SLURM_JOB_PARTITION} -t ${WALLTIME} -x $(hostname) \
          checkpointer
}

resubmit() {
  cd "${SLURM_SUBMIT_DIR}"
  if [[ ${CHECKPOINTER_ERROR_COUNT} -le ${CHECKPOINTER_MAX_ERRORS} ]]; then
    echoErr "${CHECKPOINTER_ERROR_COUNT}/${CHECKPOINTER_MAX_ERRORS} checkpoint restore errors ..."
    #/WALLTIME=$(squeue --noheader -o %l -j $SLURM_JOB_ID)
    #/echoErr "Resubmitting job ${PREVJOBID}"
    #/slurm_submit ${PREVJOBID}
    echoErr "Requeueing job ${SLURM_JOB_ID}"
    scontrol requeue ${SLURM_JOB_ID}
  else
    echoErr "Maximum of ${CHECKPOINTER_MAX_ERRORS} checkpoint restore errors allowed, exiting .."
    exit 1
  fi
}

incrementerror() {
  #/if ! [[ -f "${SLURM_SUBMIT_DIR}/.checkpointer_errors_${PREVJOBID}" ]]; then
  #/  echo "1" > "${SLURM_SUBMIT_DIR}/.checkpointer_errors_${PREVJOBID}"
  #/  CHECKPOINTER_ERROR_COUNT=1
  #/else
  #/  CHECKPOINTER_ERROR_COUNT=$(cat "${SLURM_SUBMIT_DIR}/.checkpointer_errors_${PREVJOBID}")
  #/  ((CHECKPOINTER_ERROR_COUNT+=1))
  #/  echo ${CHECKPOINTER_ERROR_COUNT} > "${SLURM_SUBMIT_DIR}/.checkpointer_errors_${PREVJOBID}"
  #/fi
  if ! [[ -f "${SLURM_SUBMIT_DIR}/.checkpointer_errors_${SLURM_JOB_ID}" ]]; then
    echo "1" > "${SLURM_SUBMIT_DIR}/.checkpointer_errors_${SLURM_JOB_ID}"
    CHECKPOINTER_ERROR_COUNT=1
  else
    CHECKPOINTER_ERROR_COUNT=$(cat "${SLURM_SUBMIT_DIR}/.checkpointer_errors_${SLURM_JOB_ID}")
    ((CHECKPOINTER_ERROR_COUNT+=1))
    echo ${CHECKPOINTER_ERROR_COUNT} > "${SLURM_SUBMIT_DIR}/.checkpointer_errors_${SLURM_JOB_ID}"
  fi
}


if [[ -z ${CHECKPOINTER_MAX_ERRORS} ]]; then
  CHECKPOINTER_MAX_ERRORS=3
fi

if [[ -z ${CHECKPOINTER_DIR} ]]; then 
  echoErr "CHECKPOINTER_DIR not set. This script needs to be invoked from 'checkpointer', not directly"
  exit 1
fi

if [[ -z ${SLURM_CHECKPOINT} ]]; then
  echoErr "environment variable SLURM_CHECKPOINT not set, please set to Slurm compatible time format."
  exit 1
else 
  SLURM_CHECKPOINT_SECS=$(slurmtime_to_sec ${SLURM_CHECKPOINT})
fi


######
mkdir -p /tmp/petersen
#####
CHECK_COUNT=0
#if [[ ${SLURM_JOB_NAME} =~ "+CRrestore+" ]]; then
if [[ -n ${SLURM_RESTART_COUNT} ]]; then
  CHECK_COUNT=${SLURM_RESTART_COUNT}
  CHECK_COUNT_PREV=$((${CHECK_COUNT}-1))
  # ********** Restoring checkpoint image ***************
  #/FULLJOBNAME=${SLURM_JOB_NAME}
  #/FIRSTJOBID=$(echo ${SLURM_JOB_NAME} | cut -d'+' -f3)
  #/PREVJOBID=$(echo ${SLURM_JOB_NAME} | cut -d'+' -f4)
  #/CHECKPOINTER_PROCESS=$(echo ${SLURM_JOB_NAME} | cut -d'+' -f5)
  cd ${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT_PREV}
  #/cd ${CHECKPOINTER_DIR}/${PREVJOBID}
  echoErr "Downloading Scratch to ${CHECKPOINTER_SCRATCH_ROOT} ..."
  #/copyTool "${CHECKPOINTER_DIR}/${PREVJOBID}/local-scratch" "${CHECKPOINTER_SCRATCH_ROOT}"
  copyTool "${CHECKPOINTER_DIR}/${SLURM_JOB_ID}/${CHECK_COUNT_PREV}/local-scratch" "${CHECKPOINTER_SCRATCH_ROOT}"
  WAITHERE=1
  #/echoErr "Waiting for checkpoint dump of previous job ${PREVJOBID} to finish ..."  
  echoErr "Waiting for checkpoint dump of previous job ${SLURM_JOB_ID} to finish ..." 
  while [[ ${WAITHERE} -eq 1 ]]; do
    # waiting for checkpoint to finish, check that files have not been modified last 10 sec
    if [[ -z $(find . -type f -newermt '-10 seconds' 2>/dev/null) ]]; then
      WAITHERE=0
    else
      sleep 3
    fi
  done
  if ! [[ -f stats-dump ]]; then
    echoErr "Previous checkpoint dump not complete, exiting !"
    exit 1
  fi
  #/echoErr "Restoring checkpointed job ${PREVJOBID} ..."
  echoErr "Restoring checkpointed job ${SLURM_JOB_ID} ..."
  ${CHECKPOINTER_LIBDIR}/checkpointer-suid restore
  CREXIT=$?
  #CREXIT=1 # simulate a restore error
  #CRPID=$!
  #/SLURM_JOB_NAME=$(echo $SLURM_JOB_NAME | cut -d'+' -f1)
  if [[ "${CREXIT}" == "0" ]]; then  
    echoErr "Checkpoint restore finished. Exit code: ${CREXIT} ..."
    sleep 3
    #/if [[ ${PREVJOBID} == ${FIRSTJOBID} ]]; then
    if [[ ${SLURM_RESTART_COUNT} -eq 1 ]]; then
      echoErr "waking up previously stopped process ${CHECKPOINTER_PROCESS}"
      kill -SIGCONT ${CHECKPOINTER_PROCESS}
      sleep 3
    fi
    wait_dump_and_submit
  else
    echoErr "Checkpoint restore failed. Exit code: ${CREXIT}. Resubmitting job ..."
    incrementerror
    resubmit
  fi
  CREXIT=$?
  exit ${CREXIT}
fi

if [[ "${SLURM_JOB_NUM_NODES}" != "1" ]]; then
  echoErr "checkpointer works only with single node jobs"
  exit 
fi

# get child proces of slurmstepd
#pstree -p ${SLURM_TASK_PID}
sleep 1
#/FIRSTJOBID=${SLURM_JOB_ID}
CHECKPOINTER_PROCESS=$(ps -o pid= --ppid ${SLURM_TASK_PID})
if [[ -z ${CHECKPOINTER_PROCESS} ]]; then
  echoErr "no script submitted in job"
  exit 1
fi

# first iteration dump 
wait_dump_and_submit
echoErr "For some reason this is exiting"
